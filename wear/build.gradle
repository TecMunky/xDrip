buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath 'io.fabric.tools:gradle:1.+'
    }

}


def generateVersionNumberString = { ->
    StringBuilder stringBuilder = new StringBuilder()
    stringBuilder.append((new Date()).format('yyMMddHHmm'))
    return stringBuilder.toString()
}

def generateTimestamp = { ->
    StringBuilder stringBuilder = new StringBuilder()
    stringBuilder.append((new Date()).getTime())
    stringBuilder.append("L")
    return stringBuilder.toString()
}

def generateRandomUUID = { ->
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append('"' + UUID.randomUUID().toString() + '"')
    return stringBuilder.toString()
}

def generateVersionName = { ->

    StringBuilder stringBuilder = new StringBuilder()
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always'
            standardOutput = stdout
        }
        String commitObject = stdout.toString().trim()
        try {
            stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            //stringBuilder.append(stdout.toString().trim())
            //stringBuilder.append("-")
        } catch (ignored) {
            // no tags
        }

        stringBuilder.append(commitObject)
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--show-toplevel'
            standardOutput = stdout
        }
        if (stdout.toString().trim().contains("xDrip-Experimental")) {
            stringBuilder.append("-experimental")
        }

        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        String branch = stdout.toString().trim()
        if (!branch.equals("master")) {
            stringBuilder.append('-')
            stringBuilder.append(branch)
        }

    } catch (ignored) {
        return "NoGitSystemAvailable"
    }
    stringBuilder.append('-')
    stringBuilder.append((new Date()).format('yyyy.MM.dd'))
    return stringBuilder.toString()

}

apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
//apply plugin: 'io.fabric'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    lintOptions {
        checkReleaseBuilds false
//        abortOnError false
    }
    defaultConfig {
        applicationId "tecmunky.xdrip.variant1"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName generateVersionName()
        buildConfigField "int", "buildVersion", generateVersionNumberString()
        buildConfigField "String", "buildUUID", generateRandomUUID()
        buildConfigField "long", "buildTimestamp", generateTimestamp()
        buildConfigField "int", "targetSDK", targetSdkVersion.mApiLevel.toString()

        applicationId = "tecmunky.xdrip.variant1"
        resValue "string", "label_xdrip", "XDrip"
        resValue "string", "label_xdrip_large", "XDrip(Large)"
        resValue "string", "label_xdrip_big_chart", "XDrip(BigChart)"
        resValue "string", "label_xdrip_circle", "XDrip(Circle)"
        resValue "string", "label_xdrip_activity", "XDrip Prefs."
        resValue "string", "app_settings", "XDrip Settings"
        signingConfig signingConfigs.config
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                def appName = "xDripWear+"
                def formattedDate = new Date().format('yyyy_MM_dd_HHmm')
                outputFileName = "${appName}${variant.baseName}-${formattedDate}.apk"
            }
        } // */
    }
    productFlavors {
    }
}

allprojects {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compileOnly 'com.google.android.wearable:wearable:2.0.1'
    implementation 'com.google.android.support:wearable:2.0.1'
    implementation 'com.android.support:appcompat-v7:23.1.1'
    // implementation 'com.google.android.support:wearable:1.4.0'
    implementation 'com.google.android.gms:play-services-wearable:9.4.0'
    implementation 'com.squareup.wire:wire-runtime:2.2.0'
    //implementation 'com.ustwo.android:clockwise-wearable:1.0.2'
    //implementation files('libs/hellocharts-library-1.5.5.jar')
    implementation(name: 'ustwo-clockwise-debug', ext: 'aar')
    implementation 'me.denley.wearpreferenceactivity:wearpreferenceactivity:0.5.0'
    implementation 'com.google.code.gson:gson:2.4'

    implementation('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
       transitive = true
    }

    //implementation 'io.reactivex:rxjava:1.3.2'
    implementation 'com.activeandroid:thread-safe-active-android:3.1.1'
    implementation 'com.google.guava:guava:18.0'
    implementation 'io.reactivex:rxjava:1.3.3'
    implementation 'com.polidea.rxandroidble:rxandroidble:1.7.0'
    implementation 'org.apache.commons:commons-math3:3.6'
    testImplementation "org.robolectric:robolectric:3.4.2"
    testImplementation 'junit:junit:4.12'
    testImplementation "com.google.truth:truth:0.39"

    implementation 'uk.com.robust-it:cloning:1.9.5'
    // you will want to install the android studio lombok plugin
    compileOnly 'org.projectlombok:lombok:1.16.20'
//    compileOnly 'javax.annotation:javax.annotation-api:1.3.1'
    annotationProcessor "org.projectlombok:lombok:1.16.20"
}
